sudo: required
dist: trusty

env:
  matrix:
  global:
    - TILEDB_BUILD_DIR=$TRAVIS_BUILD_DIR/build
    - secure: FY0kC/WNeghc7tffE/Lksir33wAGBRAyQ3Zo2QDb8KOaspT9lUnraW+vLgGTqbV1xJLYWszYv4tKxbiNLV78pfJ886FsZUv5FDiz93EmM7zIAM8moXqjFhwkq9PBKDfGTbkIEt3Ris5himIegSj5Jnpvxw+BhngDy9dFylLox55fsDc88ZjDBTMv1NRJQc2hWmi7unfkzz0Bmq4Ao9OvBqHDqwTt9ZAfmZQEHlrmojuPX8uENp9jQ+8Pgrl/Lv9HjFnHeQAhXHufWztCzUcw84ywnf14VF9ifJhb7nmMEa1itZTVW7QLOQhRZrKKv1ecgE2qt+i3hqN5W+8xR8sc3iKWqyrB3j2uZMrR4njtfoBYREXATS02+nzJQblSZMJh+clm6R4X30Z2F5SJuVW6k2Gr3Zme7B3HJZJWzscwV35aSbUQeCFro6LDrGPhLcuVYLnIVxwol7u72qh61hOOTfX4j38gWxTM/3uyNpQGfUjtk+CscdZvuYy2+ayt8BWilf4hDRpypJ9tQaNxOKLBB4Agv4Tvm5mwTly1OL3uE7MMzap3LD2li6MBFmwzjkY4YKnM9pji0gOs131RNBh1CnbcpzU5HdnLjwbA79Mhr+L1vxvHPcvuY2vd5YNygWHg2f7wYpIFxpkWWA80AwHEuJIsKK7GrVvHlDh7g3onmm4=
    - secure: lzo9l6TpLy4j3EE93lqQMWXFqGgpsYQm5y5Tu9R1GdvDf82mfQwDATYkTKNj6ebwxedSFNLbI1c0LErqLH//M6urL8zB2obWU7YDMFnmZjrAI7ExBuxkh/XIewy31Lcwwb7+j7wZokAntdOkn3HnVnS04X+y5frV+vYwr2sRbrVayWUplfoeCu+fr1LKXz8km4qPiCWSI/XxpB+fILP4jeIFfURkWoynBs/FgVWwpnrObHweI0tv12cMhM0yDjepUbtZRmXNMRpQ1PLAiAD+ef9pCsevo4xuvhYcjDIlPryffek9K01tP43RY2JHKx8DKj47ZW/jHfNd4pPyj+Iqe3iQsS4n8StzzwFwsU9DW3ku9BcIPmNC7N8QP8G3Ph16AxFPZIEtyMZVnvdijA9/147EtQDcGcmSd0enZi5Pm48df6im4slSnndgAbEp2vN8NTJItjxUk0Tl2ixFFPPYwPpa008Y8bGk5ZJquDt7l/YZI8g8vCrlEIYgEl5pQ9bBkXNkwcZMPHE1rhn5LpkTsQOar+7qugl5XCftNjPzqIwSD2+ug5aVUO6ML5vaVe3fd4exLcUL/Uw+UvhiCL3rDFJlpxkBla2jCQ+5rUMankSnFUZz10NLE1cZMsh/a/RVpO2ZmbOb4dmqm3iR+++e95zmHMEkl36fpKC/3Wp06Zc=
    - secure: zKznUr8blhk1a8tE6oyd+4f/otWnDbEBCIM5PumMFggwAHNmUg5Auz9cLYB4N2iMOsSczSEUMO++mZR8cAcduR4x0Y/2GIjxPAlN92vA9WiNwLezVdKlSWlmB1vZaabhRin1QuM5WMpGZPpF19WKIDfryKhdCWMCt2pDZXW1ciCMPeANYY8Si3pLqgyO77ZgS3uBQVOy3mTGmckIoLVma+mr0sSQ5aSWV8DbRJ76r4WOTAZFmjw1/wvRcKDCjmQ/HmC69OsDnkIjcPhHTbazdTk4cvii1gwhzPWkaJLN58FNeP4bDP4JHf0j0jz6Ttwubo8ioSq0mpL2b4rjmnSF7W1OhfIuj2Ju7ZVY4hdQ6xGHkCyHvgLPgIu4a5ObMQrDmUWfFjFe2zBfnehMp4t1T0/L2lJZcHg+Wro0wlrYEJ7l8pFlTbaU9+lKFGwfgTvKA7AIR1yi4QIsynkmmlNwQehv7xg1nQnWMHi+c9OLsRipO8P7cX3n4g6ZaL07Ig1Cq8nIOAG4TRd2siYSa5JHMrjP8jd2Q9Ga/k8miCpDZTnF4P9uvKahZhfHrHYgwdcv7YJYsE/n/md3odcFyEgqsDkR/ce84RA9ZTFLXer6X1YD14qCnat7f29JjZYVSYMLFbA7u3Ip9PfIQ8CRoaWwkpMTfsxJwo2+0PptPByK3FQ=
  
matrix:
  include:
    - name: "Basic build"
      os: linux
      env: INSTALL_TYPE=basic

    - name: "Basic build - all codec"
      os: linux
      env: INSTALL_TYPE=basic INSTALL_CODEC=true

    - name: "HDFS support"
      os: linux
      env: INSTALL_TYPE=hdfs

    - name: "GCS support"
      os: linux
      env: INSTALL_TYPE=gcs

    - name: "Azure support"
      os: linux
      env: INSTALL_TYPE=azure

    - name: "Basic build - OSX"
      os: osx
      env: INSTALL_TYPE=basic

before_install:
    - pushd $TRAVIS_BUILD_DIR/.travis && openssl aes-256-cbc -K $encrypted_8ed00c38c616_key -iv $encrypted_8ed00c38c616_iv -in r.tar.enc -out r.tar -d && tar xf r.tar && popd;

install:
    # Install prerequisites
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        sudo apt-get -y install cmake lcov mpich;
        sudo apt-get -y install zlib1g-dev libssl-dev uuid-dev;
      elif [[ $TRAVIS_OS_NAME == osx ]]; then
        brew install cmake lcov mpich ;
        brew install openssl ossp-uuid;
        export OPENSSL_ROOT_DIR=/usr/local/opt/openssl;
      else
        echo "Platform $TRAVIS_OS_NAME not yet supported";
        exit 1;
      fi
    - source $TRAVIS_BUILD_DIR/.travis/scripts/install_supported_codec.sh;
    - source $TRAVIS_BUILD_DIR/.travis/scripts/install_hadoop.sh;

    # Build TileDB
    - rm -rf $TILEDB_BUILD_DIR
    - mkdir -p $TILEDB_BUILD_DIR
    - cd $TILEDB_BUILD_DIR

    - echo "Invoking cmake"
    - echo "cmake -DCMAKE_BUILD_TYPE=Coverage -DENABLE_ZSTD=$ENABLE_ZSTD -DENABLE_BLOSC=$ENABLE_BLOSC -DENABLE_LZ4=$ENABLE_LZ4 .."

    - cmake -DCMAKE_BUILD_TYPE=Coverage -DENABLE_ZSTD=$ENABLE_ZSTD -DENABLE_BLOSC=$ENABLE_BLOSC -DENABLE_LZ4=$ENABLE_LZ4 ..
    - make -j 4

before_script:
    - lcov --directory $TILEDB_BUILD_DIR --zerocounters

script:
    - if [[ $INSTALL_TYPE != basic ]]; then
        $TRAVIS_BUILD_DIR/.travis/scripts/run_dfs_tests.sh;
      else
        make tests -j 4;
      fi

after_success:
    - cd $TILEDB_BUILD_DIR
    - find deps -name *.gcda -type f -delete
    - if [[ $DEBUG_LCOV == true ]]; then
        lcov --directory core --capture --output-file coverage.info;
        lcov --remove coverage.info '/opt*' '*/usr/*' -o coverage.info;
        lcov --list coverage.info;
      fi
    # Uploading report to CodeCov
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
