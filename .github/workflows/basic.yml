name: Basic workflow to build and test TileDB

on: [push, pull_request]

env:
  CMAKE_BUILD_TYPE: Coverage
  CMAKE_BUILD_DIR: ${{github.workspace}}/build
  HADOOP_VER: 3.2.1

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, macOS-10.15]
        type: [basic, basic-codec, hdfs, gcs, azure, azurite]
        exclude:
          - os: macos-10.15
            type: basic-codec
          - os: macos-10.15
            type: hdfs
          - os: macos-10.15
            type: gcs
          - os: macos-10.15
            type: azure
          - os: macos-10.15
            type: azurite

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir -p $CMAKE_BUILD_DIR

    - name: Install Prereqs and Configure CMake - Ubuntu
      if: startsWith(matrix.os,'ubuntu')
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
        sudo apt-get update
        sudo apt-get -y install cmake lcov
        sudo apt-get -y install zlib1g-dev libssl-dev uuid-dev libcurl4-openssl-dev
        export ENABLE_ZSTD=0
        export ENABLE_BLOSC=0
        if [[ ${{matrix.type}} == "basic-codec" ]]; then
          source $GITHUB_WORKSPACE/.github/scripts/install_supported_codec.sh
        fi
        if [[ ${{matrix.type}} == "azurite" ]]; then
          sudo apt-get -y install nodejs-dev node-gyp libssl1.0 npm
          npm install -g azurite
          which azurite
          azurite &
        fi
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
               -DENABLE_ZSTD=$ENABLE_ZSTD -DENABLE_BLOSC=$ENABLE_BLOSC

    - name: Install Prereqs and Configure CMake - MacOS
      if: startsWith(matrix.os, 'macOS')
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
        brew list cmake &>/dev/null || brew install cmake
        brew list lcov &>/dev/null || brew install lcov
        brew list openssl &>/dev/null || brew install openssl
        brew list ossp-uuid &>/dev/null || brew install ossp-uuid
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
      env:
        OPENSSL_ROOT_DIR: /usr/local/opt/openssl

    - name: Build and Test
      if: startsWith(matrix.type, 'basic')
      shell: bash
      working-directory:  ${{env.CMAKE_BUILD_DIR}}
      run: |
        make -j4
        make tests -j 4
        export TILEDB_BENCHMARK=1
        time test/test_sparse_array_benchmark
        export TILEDB_DISABLE_FILE_LOCKING=1
        time test/test_sparse_array_benchmark
        export TILEDB_KEEP_FILE_HANDLES_OPEN=1
        time test/test_sparse_array_benchmark

    - name: Build and Test - Azurite
      if: matrix.type == 'azurite'
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
        az storage container create -n test --connection-string "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;"
        

    - name: Cache Distributed FileSystems
      if: matrix.type == 'hdfs' || matrix.type == 'gcs' || matrix.type == 'azure'
      uses: actions/cache@v2
      with:
        path: ~/hadoop-${{env.HADOOP_VER}}
        key: dfs-${{env.HADOOP_VER}}-v1
        

    - name: Build and Test - Distributed FileSystems
      if: matrix.type == 'hdfs' || matrix.type == 'gcs' || matrix.type == 'azure'
      shell: bash
      working-directory:  ${{env.CMAKE_BUILD_DIR}}
      run: |
        source $GITHUB_WORKSPACE/.github/scripts/install_hadoop.sh
        source $GITHUB_WORKSPACE/.github/scripts/run_dfs_tests.sh
      env:
        INSTALL_DIR: ${{runner.workspace}}
        INSTALL_TYPE: ${{matrix.type}}
        R_TAR: ${{secrets.R_TAR}}

    - name: Upload Report to CodeCov
      uses: codecov/codecov-action@v1
