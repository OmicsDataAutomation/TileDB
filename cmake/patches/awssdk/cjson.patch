diff -Naur awssdk-build/aws-cpp-sdk-core/source/external/cjson/cJSON.cpp awssdk-build.modify/aws-cpp-sdk-core/source/external/cjson.modify/cJSON.cpp 
--- awssdk-build/aws-cpp-sdk-core/source/external/cjson/cJSON.cpp	2023-02-21 16:47:21.000000000 -0800
+++ awssdk-build/aws-cpp-sdk-core/source/external/cjson.modify/cJSON.cpp	2023-02-21 16:46:14.000000000 -0800
@@ -120,7 +120,7 @@
 CJSON_PUBLIC(const char*) cJSON_Version(void)
 {
     static char version[15];
-    sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
+    snprintf(version, sizeof(version), "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
 
     return version;
 }
@@ -566,26 +566,28 @@
         return false;
     }
 
+    size_t number_buffer_size = sizeof(number_buffer);
+
     /* For integer which is out of the range of [INT_MIN, INT_MAX], valuestring is an integer literal. */
     if (item->valuestring)
     {
-        length = sprintf((char*)number_buffer, "%s", item->valuestring);
+        length = snprintf((char*)number_buffer, number_buffer_size, "%s", item->valuestring);
     }
     /* This checks for NaN and Infinity */
     else if (isnan(d) || isinf(d))
     {
-        length = sprintf((char*)number_buffer, "null");
+        length = snprintf((char*)number_buffer,  number_buffer_size, "null");
     }
     else
     {
         /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
-        length = sprintf((char*)number_buffer, "%1.15g", d);
+        length = snprintf((char*)number_buffer,  number_buffer_size, "%1.15g", d);
 
         /* Check whether the original double can be recovered */
         if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
         {
             /* If not, print with 17 decimal places of precision */
-            length = sprintf((char*)number_buffer, "%1.17g", d);
+            length = snprintf((char*)number_buffer,  number_buffer_size, "%1.17g", d);
         }
     }
 
@@ -1018,7 +1020,7 @@
                     break;
                 default:
                     /* escape and print as unicode codepoint */
-                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
+                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
                     output_pointer += 4;
                     break;
             }
@@ -2470,7 +2472,7 @@
         if (num > INT_MAX || num < INT_MIN)
         {
             char buf[21];
-            sprintf(buf, "%lld", num);
+            snprintf(buf, sizeof(buf), "%lld", num);
             item->valuestring = (char*)cJSON_strdup((const unsigned char*)buf, &global_hooks);
         }
 
